// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PRO05_backend_riley_tanya_dani_levi.Data;

#nullable disable

namespace PRO05_backend_riley_tanya_dani_levi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241121105234_InitialMigrationForRender")]
    partial class InitialMigrationForRender
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("CollectionRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("integer");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("RecipeId");

                    b.ToTable("CollectionRecipes");
                });

            modelBuilder.Entity("Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CookingTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CookingTime = 30,
                            CreatedAt = new DateTime(2024, 11, 21, 10, 52, 34, 177, DateTimeKind.Utc).AddTicks(5640),
                            Description = "A classic Italian pasta dish.",
                            Ingredients = "Spaghetti, minced beef, tomato sauce, onions, garlic",
                            IsPublic = true,
                            Title = "Spaghetti Bolognese",
                            UpdatedAt = new DateTime(2024, 11, 21, 10, 52, 34, 177, DateTimeKind.Utc).AddTicks(5640),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CookingTime = 15,
                            CreatedAt = new DateTime(2024, 11, 21, 10, 52, 34, 177, DateTimeKind.Utc).AddTicks(5640),
                            Description = "A quick and healthy stir fry.",
                            Ingredients = "Mixed vegetables, soy sauce, garlic, ginger",
                            IsPublic = true,
                            Title = "Vegetable Stir Fry",
                            UpdatedAt = new DateTime(2024, 11, 21, 10, 52, 34, 177, DateTimeKind.Utc).AddTicks(5640),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 21, 10, 52, 34, 177, DateTimeKind.Utc).AddTicks(5490),
                            Email = "john.doe@example.com",
                            PasswordHash = "Foodie123",
                            Username = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 21, 10, 52, 34, 177, DateTimeKind.Utc).AddTicks(5490),
                            Email = "jane.smith@example.com",
                            PasswordHash = "Burgers345",
                            Username = "Jane Smith"
                        });
                });

            modelBuilder.Entity("Collection", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CollectionRecipe", b =>
                {
                    b.HasOne("Collection", "Collection")
                        .WithMany("CollectionRecipes")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recipe", "Recipe")
                        .WithMany("CollectionRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Recipe", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Collection", b =>
                {
                    b.Navigation("CollectionRecipes");
                });

            modelBuilder.Entity("Recipe", b =>
                {
                    b.Navigation("CollectionRecipes");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
